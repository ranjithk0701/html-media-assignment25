1->
class Solution {
public:
    void helper(vector<int>& nums, vector<int> ans, vector<vector<int>>& finalAns, int idx){
        if(idx==nums.size()){
            finalAns.push_back(ans);
            return;
        }
        helper(nums,ans,finalAns,idx+1);
        ans.push_back(nums[idx]);
        helper(nums,ans,finalAns,idx+1);
    }
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<int> ans;
        vector<vector<int>> finalAns;
        helper(nums,ans,finalAns,0);
        return finalAns;
    }
};

2->


3->

#include <iostream>
using namespace std;

void fun(string &s1, int lo1, string &s2, int lo2, int count, int &final) {
    if (lo1 == s1.size() && lo2 < s2.size()) {
        lo2++;
        lo1 = lo2;
    }
    if (lo2 == s2.size()) {
        return;
    }

    if (s1[lo1] == s2[lo2]) {
        count++;
        final = max(final, count);
        fun(s1, lo1 + 1, s2, lo2 + 1, count, final);
    } else {
        fun(s1, lo1 + 1, s2, lo2, 0, final);
    }
}

int main() {
    string s1 = "abcdef";
    string s2 = "zcdemf";
    int count = 0;
    int final = 0;
    fun(s1, 0, s2, 0, count, final);
    cout<<final;
    return 0;
}

4->

#include <iostream>
using namespace std;



int main() {
    int n = 3;
    for(int i = n-1; i >= 1; i--){
        n *= i;
    }
    cout<<n;
    return 0;
}

5->
